# Copyright 2010 - 2013, Qualcomm Innovation Center, Inc.
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
# 

import os
Import('env')

# Set up TMP 
env['ENV']['TMP'] = os.environ['TMP']

env.Append(CXXFLAGS=['/wd4355', '/wd4447'])

# Windows specific compiler flags
env.Append(CPPDEFINES=['QCC_OS_WINRT',
                       'QCC_CPU_X86',
                       'UNICODE',
                       '_UNICODE',
                       'WIN32_LEAN_AND_MEAN',
					   '_SCL_SECURE_NO_WARNINGS'])

# Set MS OS version number
# Windows 8
env.Append(CPPDEFINES=[('WINAPI_FAMILY', '2')])

# Lib setup
env.Append(LFLAGS=['/NODEFAULTLIB:libcmt.lib'])
env.Append(LINKFLAGS=['/NODEFAULTLIB:libcmt.lib'])

# Debug/Release variants
if env['VARIANT'] == 'debug':
   env.Append(CFLAGS=['/ZW', '/Od', '/Oy-', '/Gd', '/Gm-', '/EHsc', '/RTC1', '/MDd', '/GS', '/fp:precise', '/Zc:wchar_t', '/Zc:forScope'])
   env.Append(CXXFLAGS=['/ZW', '/Od', '/Oy-', '/Gd', '/Gm-', '/EHsc', '/RTC1', '/MDd', '/GS', '/fp:precise', '/Zc:wchar_t', '/Zc:forScope'])
   env.Append(LINKFLAGS=['/debug'])
   env.Append(JAVACFLAGS='-g -Xlint -Xlint:-serial')
else:
   env.Append(CFLAGS=['/ZW', '/O2', '/Gd', '/Gm-', '/EHsc', '/MD', '/GS', '/fp:precise', '/Zc:wchar_t', '/Zc:forScope'])
   env.Append(CXXFLAGS=['/ZW', '/O2', '/Gd', '/Gm-', '/EHsc', '/MD', '/GS', '/fp:precise', '/Zc:wchar_t', '/Zc:forScope'])
   env.Append(LINKFLAGS=['/opt:ref'])   
   env.Append(JAVACFLAGS='-Xlint -Xlint:-serial')	

# Lib setup
env.Append(LFLAGS=['/NODEFAULTLIB:libcmt.lib'])
env.Append(LINKFLAGS=['/NODEFAULTLIB:libcmt.lib'])

# This will cause Microsoft .pdb files to be generated for release and debug build
# variants. The side effects of this options is that each .obj file will also generate
# a pdb file.  These are then resolved to a single pdb file by the linker.  
# this also makes it possible to build using the -j option since files are no longer 
# sharing a single pdb. 
if env['VARIANT'] == 'debug':
    env['CCPDBFLAGS'] = '/Zi /Fd${TARGET.base}.pdb'
    env['PDB'] = '${TARGET.base}.pdb'

# Archive expander
def archive_expand(target, source, env):
   # Copy sources to targets
   outdir = env.subst(os.path.dirname(str(target[0])))
   for archive in source:
      Copy(outdir, str(archive))
   return None
      
def archive_expand_emitter(target, source, env):
   # target starts out as phony file in the desired output directory
   # target ends up being the list of copied libraries
   outdir = env.subst(os.path.dirname(str(target[0])))
   modTargets = []
   for archive in source:
      modTargets.append(File(outdir+os.path.sep+os.path.basename(str(archive))))
   return modTargets, source

expand_bld = Builder(action=archive_expand, emitter=archive_expand_emitter)
env.Append(BUILDERS={'ArchiveExpand' : expand_bld})
